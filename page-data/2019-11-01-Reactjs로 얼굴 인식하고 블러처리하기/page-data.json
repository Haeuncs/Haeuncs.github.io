{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-11-01-Reactjs로 얼굴 인식하고 블러처리하기/","result":{"data":{"site":{"siteMetadata":{"title":"🤖"}},"markdownRemark":{"id":"8fa4e62b-76e2-5953-bc93-6f071106f88d","excerpt":"🚀 TIL 01 🚀 실행결과~_~ 작업의 순서는 아래와 같다. 마무리","html":"<h1>🚀 TIL 01 🚀</h1>\n<br/>\n<br/>\n오늘 해야하는 작업은 웹에서 사용자가 입력한 이미지에서 얼굴을 인식하고 인식된 얼굴 부분을 블러 처리해서 처리된 이미지를 출력하는 웹 개발이었다.<br/>\n당연하게도 서버를 사용해서 Python으로 바로 실행하는게 낫긴 하지만.. 하지만 요청된 기능은 웹으로만 동작해야했기 때문에 조금 삽질을 했다.🗿\n<br/>\n<h1>실행결과~_~</h1>\n<br/>\nblur 처리된 내 얼굴\n<!-- <img src=\"../assets/images/191101/blured.png\" width=\"300\"> -->\n<br/>\n<h1>작업의 순서는 아래와 같다.</h1>\n<br/>\n1. 사용자가 이미지 올림\n2. 이미지를 tensorflow모델에 입력값으로 넣어 출력된 좌표값을 저장\n3. 이미지를 canvas에 그리고, 좌표 배열을 읽어 좌표에 맞는 블러 처리된 타원을 canvas에 그린다.\n<br/>\n처음 생각했던 방법은 div 안에 자식 img와 blur처리하는 div를 한번에 이미지화하는 방법을 생각했는데, blur처리된 div는 이미지로 저장이 안되었다.<br/>\n그래서 두번째로 생각했던 방법은 canvas를 사용하여 blur 처리하는 방법이었고 이 방법으로 100% 요구된 기능을 구현하였다.<br/>\ncanvas를 처음 사용했기 때문에 조금 공부를 해야했긴 했지만 어렵지는 않았다.<br/>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 학습 모델 결과 값을 canvas 에 그린다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">printToFile</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// useRef 로 ref를 미리 선언한거를 가져온다.</span>\n<span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> myRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> imageRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> imageURL<span class=\"token punctuation\">,</span> detections<span class=\"token punctuation\">,</span> match <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> initState<span class=\"token punctuation\">;</span>\n\n    canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n    canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// resize를 하는 이유는 화면 크기에 따른 이미지 크기를 보여주기 위함</span>\n    <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 아래 3줄은 '원본' 이미지를 그리는 소스</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span>filter <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// detections은 얼굴 인식된 값을 가지고 있음</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>detections<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      detections<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">detection<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> _H <span class=\"token operator\">=</span> detection<span class=\"token punctuation\">.</span>box<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> _W <span class=\"token operator\">=</span> detection<span class=\"token punctuation\">.</span>box<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> _X <span class=\"token operator\">=</span> detection<span class=\"token punctuation\">.</span>box<span class=\"token punctuation\">.</span>_x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> _Y <span class=\"token operator\">=</span> detection<span class=\"token punctuation\">.</span>box<span class=\"token punctuation\">.</span>_y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> centerX <span class=\"token operator\">=</span> _X <span class=\"token operator\">+</span> _W <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> centerY <span class=\"token operator\">=</span> _Y <span class=\"token operator\">+</span> _H <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// blur 처리</span>\n        ctx<span class=\"token punctuation\">.</span>filter <span class=\"token operator\">=</span> <span class=\"token string\">\"blur(10px)\"</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// parameter</span>\n        <span class=\"token comment\">// centerX, centerY, raduis, 0, 2*Math.PI(는 타원));</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span>centerX<span class=\"token punctuation\">,</span> centerY<span class=\"token punctuation\">,</span> _H <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">clip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>initState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    temp<span class=\"token punctuation\">.</span>loading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setInitState</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 동적으로 뷰를 뿌리기 위해서 사용하는 부분</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">resize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resize\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> myRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> ratio <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> canvas_height <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> canvas_width <span class=\"token operator\">=</span> canvas_height <span class=\"token operator\">*</span> ratio<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canvas_width <span class=\"token operator\">></span> window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      canvas_width <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">;</span>\n      canvas_height <span class=\"token operator\">=</span> canvas_width <span class=\"token operator\">/</span> ratio<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    canvas<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> canvas_width <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\n    canvas<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> canvas_height <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<br/>\n<h1>마무리</h1>\n<br/>\ncanvas의 사용법을 공부했다 :0\n```","frontmatter":{"title":"TIL_01_Reactjs로 얼굴 인식하고 블러처리하기","date":"November 01, 2019","description":null}}},"pageContext":{"slug":"/2019-11-01-Reactjs로 얼굴 인식하고 블러처리하기/","previous":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"New Beginnings"}},"next":{"fields":{"slug":"/Reference-Value/"},"frontmatter":{"title":"Reference Type VS Value Type, Class VS Struct"}}}}}