{"componentChunkName":"component---src-templates-blog-post-js","path":"/Reference-Value/","result":{"data":{"site":{"siteMetadata":{"title":"방가방가"}},"markdownRemark":{"id":"8aff5f10-8289-5688-aa6c-eac2548eadc3","excerpt":"Reference Type VS Value Type value type을 전달할 경우, 해당 변수는 데이터의 복사값을 생성합니다. reference type을 전달할 경우, 해당 변수는 메모리에 있는 원래의 데이터를 가리킵니다. Reference Type Value Type…","html":"<h1 id=\"reference-type-vs-value-type\" style=\"position:relative;\"><a href=\"#reference-type-vs-value-type\" aria-label=\"reference type vs value type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference Type VS Value Type</h1>\n<ul>\n<li>value type을 전달할 경우, 해당 변수는 데이터의 복사값을 생성합니다.</li>\n<li>reference type을 전달할 경우, 해당 변수는 메모리에 있는 원래의 데이터를 가리킵니다.</li>\n</ul>\n<p>Reference Type</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- Class\n- Closure\n- function</code></pre></div>\n<p>Value Type</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- Struct\n- enum\n- Array\n- String\n- Dictionary\n- int</code></pre></div>\n<p>스위프트 표준 라이브러리에 포함되어 있는 기본 타입은 모두 구조체로 구현되어 있음 ⇒ 모두 값 타입</p>\n<hr>\n<h3 id=\"class와-struct의-차이는-무엇인가요\" style=\"position:relative;\"><a href=\"#class%EC%99%80-struct%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\" aria-label=\"class와 struct의 차이는 무엇인가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class와 struct의 차이는 무엇인가요?</h3>\n<p><a href=\"https://developer.apple.com/swift/blog/?id=10\">Value and Reference Types - Swift Blog</a></p>\n<ul>\n<li>\n<p>언제 어느 것을 사용해야하는지 몇가지 예를 들기</p>\n<p>상속 → 클래스, 타입캐스팅 → 클래스의 인스턴스에서만, deinitializer 사용은 클래스</p>\n</li>\n<li>\n<p>메모리 (Stack, Heap) 에 유지되는 방법</p>\n</li>\n</ul>\n<br/>\n<hr>\n<h3 id=\"class\" style=\"position:relative;\"><a href=\"#class\" aria-label=\"class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class</h3>\n<p>Reference Type (참조)</p>\n<p>Class 는 heap 영역에, 그 인스턴스의 <strong>주소값</strong>은 Stack 영역에 쌓임</p>\n<p>더는 참조할 필요가 없을 때 메모리에서 해제 (=소멸)되기 직전 deinit 메서드가 호출된다.</p>\n<p>런타임에 할당되고 <strong>레퍼런스 카운팅</strong>을 통해 참조 해제 관리</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Reference type example</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> data<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> x\t\t\t\t\t\t<span class=\"token comment\">// x is copied to y</span>\nx<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\t\t\t\t\t\t<span class=\"token comment\">// changes the instance referred to by x (and y)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">x<span class=\"token punctuation\">.</span>data</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">, </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">y<span class=\"token punctuation\">.</span>data</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// prints \"42, 42\"</span></code></pre></div>\n<br/>\n<h3 id=\"struct\" style=\"position:relative;\"><a href=\"#struct\" aria-label=\"struct permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Struct</h3>\n<p>Value Type (값)</p>\n<p>Struct 는 <strong>값 타입</strong>이기 때문에 인스턴스를 생성할 때, 인스턴스를 새로 다른 공간에 <strong>새롭게 복사한 인자</strong>를 전달</p>\n<p>그렇기 때문에 <strong>Stack</strong> 에 쌓인다</p>\n<p>컴파일 시간에 컴파일러가 언제 메모리를 할당 및 해제해야 하는지 알고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Value type example</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">S</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> data<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a\t\t\t\t\t\t<span class=\"token comment\">// a is copied to b</span>\na<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\t\t\t\t\t\t<span class=\"token comment\">// Changes a, not b</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">a<span class=\"token punctuation\">.</span>data</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">, </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">b<span class=\"token punctuation\">.</span>data</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// prints \"42, -1\"</span></code></pre></div>\n<br/>\n<hr>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<p>Class 에 인스턴스를 만들고 변수의 값을 바꾸면 → 해당 인스턴스의 값이 변경</p>\n<p>Struct 에 인스턴스를 만들고 변수의 값을 바꾸면 → 해당 인스턴스 값이 변경되지 않음</p>\n<p>⇒ 구조체와 클래스의 차이는 상수를 처리하는 방식, 구조체 자체가 상수임으로 변수의 값을 바꿀 수 없다.</p>\n<p>Class 를 let 상수로 선언해도 내부 프로퍼티의 값을 변경할 수 있음</p>\n<p><strong>Struct 는 안됨</strong>\n<br/>\n<br/></p>\n<hr>\n<h2 id=\"구조체와-클래스의-공통점\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%99%80-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EA%B3%B5%ED%86%B5%EC%A0%90\" aria-label=\"구조체와 클래스의 공통점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조체와 클래스의 <strong>공통점</strong></h2>\n<ul>\n<li>값을 저장하기 위한 프로퍼티 정의</li>\n<li>기능 실행을 위한 메서드 정의</li>\n<li>서브스크립트 문법을 통해 클래스 혹은 구조체가 갖는 값(프로퍼티)에 접근할 수 있다.</li>\n<li>초기화될 떄 상태를 지정하기 위해 이니셜라이즈를 정을할 수 있음</li>\n<li>기능 추가를 위해 extension으로 확장 가능</li>\n<li>특정 기능을 실행하기 위해 특정 프로토콜 준수 가능</li>\n</ul>\n<br/>\n<h2 id=\"언제-구조체를-사용\" style=\"position:relative;\"><a href=\"#%EC%96%B8%EC%A0%9C-%EA%B5%AC%EC%A1%B0%EC%B2%B4%EB%A5%BC-%EC%82%AC%EC%9A%A9\" aria-label=\"언제 구조체를 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>언제 구조체를 사용?</strong></h2>\n<ul>\n<li>연관된 간단한 값의 집합을 <strong>캡슐화</strong> 하는 것만이 목적일 때</li>\n<li>값을 참조보다는 <strong>복사</strong>하는 것이 합당할 때</li>\n<li>구조체에 저장된 프로퍼티의 값이 <strong>값 타입</strong>일 때</li>\n<li>다른 타입으로부터 <strong>상속받거나</strong> 자신을 <strong>상속할</strong> 필요가 없을 때</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#reference-type-vs-value-type\">Reference Type VS Value Type</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#class%EC%99%80-struct%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\">Class와 struct의 차이는 무엇인가요?</a></li>\n<li><a href=\"#class\">Class</a></li>\n<li><a href=\"#struct\">Struct</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C\">예시</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%99%80-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EA%B3%B5%ED%86%B5%EC%A0%90\">구조체와 클래스의 <strong>공통점</strong></a></p>\n</li>\n<li>\n<p><a href=\"#%EC%96%B8%EC%A0%9C-%EA%B5%AC%EC%A1%B0%EC%B2%B4%EB%A5%BC-%EC%82%AC%EC%9A%A9\"><strong>언제 구조체를 사용?</strong></a></p>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Reference Type VS Value Type, Class VS Struct","date":"2020年05月02日","description":"Swift 에서 Reference Type VS Value Type 를 알아보자 💃🏻"}}},"pageContext":{"slug":"/Reference-Value/","previous":null,"next":{"fields":{"slug":"/BaseFramework/Framework/"},"frontmatter":{"title":"Swift의 가장 기본 Framework 에 대해 간단히 알아보자"},"tableOfContents":"<ul>\n<li><a href=\"#framework\">Framework</a></li>\n</ul>"}}},"staticQueryHashes":["426816048","63159454"]}