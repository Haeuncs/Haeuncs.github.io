{"componentChunkName":"component---src-templates-blog-post-js","path":"/Reference-Value/","result":{"data":{"site":{"siteMetadata":{"title":"2021"}},"markdownRemark":{"id":"14b82cff-0974-5fa9-ba21-4438ce4bfe16","excerpt":"Reference Type VS Value Type value type을 전달할 경우, 해당 변수는 데이터의 복사값을 생성합니다. reference type을 전달할 경우, 해당 변수는 메모리에 있는 원래의 데이터를 가리킵니다. Reference Type Value Type…","html":"<h1>Reference Type VS Value Type</h1>\n<ul>\n<li>value type을 전달할 경우, 해당 변수는 데이터의 복사값을 생성합니다.</li>\n<li>reference type을 전달할 경우, 해당 변수는 메모리에 있는 원래의 데이터를 가리킵니다.</li>\n</ul>\n<p>Reference Type</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- Class\n- Closure\n- function</code></pre></div>\n<p>Value Type</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- Struct\n- enum\n- Array\n- String\n- Dictionary\n- int</code></pre></div>\n<p>스위프트 표준 라이브러리에 포함되어 있는 기본 타입은 모두 구조체로 구현되어 있음 ⇒ 모두 값 타입</p>\n<hr>\n<h3>Class와 struct의 차이는 무엇인가요?</h3>\n<p><a href=\"https://developer.apple.com/swift/blog/?id=10\">Value and Reference Types - Swift Blog</a></p>\n<ul>\n<li>\n<p>언제 어느 것을 사용해야하는지 몇가지 예를 들기</p>\n<p>상속 → 클래스, 타입캐스팅 → 클래스의 인스턴스에서만, deinitializer 사용은 클래스</p>\n</li>\n<li>메모리 (Stack, Heap) 에 유지되는 방법</li>\n</ul>\n<br/>\n<hr>\n<h3>Class</h3>\n<p>Reference Type (참조)</p>\n<p>Class 는 heap 영역에, 그 인스턴스의 <strong>주소값</strong>은 Stack 영역에 쌓임</p>\n<p>더는 참조할 필요가 없을 때 메모리에서 해제 (=소멸)되기 직전 deinit 메서드가 호출된다.</p>\n<p>런타임에 할당되고 <strong>레퍼런스 카운팅</strong>을 통해 참조 해제 관리</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Reference type example</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> x\t\t\t\t\t\t<span class=\"token comment\">// x is copied to y</span>\nx<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\t\t\t\t\t\t<span class=\"token comment\">// changes the instance referred to by x (and y)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>x<span class=\"token punctuation\">.</span>data<span class=\"token delimiter variable\">)</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>y<span class=\"token punctuation\">.</span>data<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// prints \"42, 42\"</span></code></pre></div>\n<br/>\n<h3>Struct</h3>\n<p>Value Type (값)</p>\n<p>Struct 는 <strong>값 타입</strong>이기 때문에 인스턴스를 생성할 때, 인스턴스를 새로 다른 공간에 <strong>새롭게 복사한 인자</strong>를 전달</p>\n<p>그렇기 때문에 <strong>Stack</strong> 에 쌓인다</p>\n<p>컴파일 시간에 컴파일러가 언제 메모리를 할당 및 해제해야 하는지 알고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Value type example</span>\n<span class=\"token keyword\">struct</span> S <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">S</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a\t\t\t\t\t\t<span class=\"token comment\">// a is copied to b</span>\na<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\t\t\t\t\t\t<span class=\"token comment\">// Changes a, not b</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>a<span class=\"token punctuation\">.</span>data<span class=\"token delimiter variable\">)</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>b<span class=\"token punctuation\">.</span>data<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// prints \"42, -1\"</span></code></pre></div>\n<br/>\n<hr>\n<h3>예시</h3>\n<p>Class 에 인스턴스를 만들고 변수의 값을 바꾸면 → 해당 인스턴스의 값이 변경</p>\n<p>Struct 에 인스턴스를 만들고 변수의 값을 바꾸면 → 해당 인스턴스 값이 변경되지 않음</p>\n<p>⇒ 구조체와 클래스의 차이는 상수를 처리하는 방식, 구조체 자체가 상수임으로 변수의 값을 바꿀 수 없다.</p>\n<p>Class 를 let 상수로 선언해도 내부 프로퍼티의 값을 변경할 수 있음</p>\n<p><strong>Struct 는 안됨</strong>\n<br/>\n<br/></p>\n<hr>\n<h2>구조체와 클래스의 <strong>공통점</strong></h2>\n<ul>\n<li>값을 저장하기 위한 프로퍼티 정의</li>\n<li>기능 실행을 위한 메서드 정의</li>\n<li>서브스크립트 문법을 통해 클래스 혹은 구조체가 갖는 값(프로퍼티)에 접근할 수 있다.</li>\n<li>초기화될 떄 상태를 지정하기 위해 이니셜라이즈를 정을할 수 있음</li>\n<li>기능 추가를 위해 extension으로 확장 가능</li>\n<li>특정 기능을 실행하기 위해 특정 프로토콜 준수 가능\n<br/></li>\n</ul>\n<h2><strong>언제 구조체를 사용?</strong></h2>\n<ul>\n<li>연관된 간단한 값의 집합을 <strong>캡슐화</strong> 하는 것만이 목적일 때</li>\n<li>값을 참조보다는 <strong>복사</strong>하는 것이 합당할 때</li>\n<li>구조체에 저장된 프로퍼티의 값이 <strong>값 타입</strong>일 때</li>\n<li>다른 타입으로부터 <strong>상속받거나</strong> 자신을 <strong>상속할</strong> 필요가 없을 때</li>\n</ul>","frontmatter":{"title":"Reference Type VS Value Type, Class VS Struct","date":"2020년05월02일","description":"Swift 에서 Reference Type VS Value Type 를 알아보자 💃🏻"}}},"pageContext":{"slug":"/Reference-Value/","previous":null,"next":{"fields":{"slug":"/BaseFramework/Framework/"},"frontmatter":{"title":"Swift의 가장 기본 Framework 에 대해 간단히 알아보자"}}}}}