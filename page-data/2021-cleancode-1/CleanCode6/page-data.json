{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-cleancode-1/CleanCode6/","result":{"data":{"site":{"siteMetadata":{"title":"방가방가"}},"markdownRemark":{"id":"af0f1309-8f40-5578-8076-a39f1bd012a6","excerpt":"변수를 private으로 정의하여 변수에 의존하지 않게 만든다. 그렇다면 어째서 get, set 함수를 당연하게 public해 비공개 변수를 외부에 노출할까? 자료 추상화 구현을 감추려면 추상화가 필요하다. get, set…","html":"<p>변수를 private으로 정의하여 변수에 의존하지 않게 만든다. 그렇다면 어째서 get, set 함수를 당연하게 public해 비공개 변수를 외부에 노출할까?</p>\n<h2 id=\"자료-추상화\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C-%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"자료 추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료 추상화</h2>\n<p>구현을 감추려면 추상화가 필요하다. get, set함수로 변수를 다룬다고 클래스가 되지는 않는다.</p>\n<p>추상 인터페이스를 제공해 사용자가 구현을 모른 채 자료의 핵심을 조작할 수 있어야 진정한 의미의 클래스이다.</p>\n<p>자료를 세세하게 공개하기 보다는 추상적인 개념으로  표현하는 편이 좋다.</p>\n<h2 id=\"자료객체-비대칭\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C%EA%B0%9D%EC%B2%B4-%EB%B9%84%EB%8C%80%EC%B9%AD\" aria-label=\"자료객체 비대칭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료/객체 비대칭</h2>\n<h2 id=\"디미터-법칙\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%AF%B8%ED%84%B0-%EB%B2%95%EC%B9%99\" aria-label=\"디미터 법칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디미터 법칙</h2>\n<p>모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙이다.</p>\n<p>“클래스 C의 메서드 f는 다음과 같은 객체의 메서드만 호출해야 한다”</p>\n<ul>\n<li>클래스 C</li>\n<li>f가 생성한 객체</li>\n<li>f 인수로 넘어온 객체</li>\n<li>C 인스턴스 변수에 저장된 객체</li>\n</ul>\n<p>위 객체에서 허용된 메서드가 반환하는 객체의 메서드는 호출하면 안 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let outputDir: String = ctct.getOptions().getScratchDir().getAbsolutePath()</code></pre></div>\n<p><strong>기차 충돌</strong></p>\n<p>위와 같은 코드를 기차 충돌(train wreck)이라 부른다. 위 코드는 다음과 같이 나누는 편이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let opts: Options = ctxt.getOptions()\nlet scratchDir: File = opts.getSratchDir()\nlet outputDir: String = scratchDir.getAbsolutePath()</code></pre></div>\n<p>위 예제가 디미터 법칙을 위반하는지 여부는 ctxt, options, scratchDir 이 객체인지 자료구조인지에 달렸다.</p>\n<ul>\n<li>객체라면 내부 구조를 숨겨야 하므로 디미터 법칙을 위반</li>\n<li>자료 구조라면 당연히 내부 구조를 노출하므로 디미터 법칙이 적용되지 않는다.</li>\n</ul>\n<p>위 예제는 조회 함수를 사용하는 바람에 혼란을 일으킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let outputDir = ctxt.options.scratchDir.absolutePath</code></pre></div>\n<p>와 같이 구현하면 디미터 법칙을 거론할 필요가 없다.</p>\n<p>자료 구조</p>\n<ul>\n<li>무조건 함수 없이 공개 변수만 포함</li>\n</ul>\n<p>객체</p>\n<ul>\n<li>비공개 변수와 공개 함수를 포함</li>\n</ul>\n<p>로 구현한다면 문제는 훨씬 간단하다.</p>\n<p><strong>잡종 구조</strong></p>\n<p>이런 혼란으로 절반은 자료 구조, 절반은 객체인 잡종 구조가 나온다.</p>\n<p>프로그래머가 함수나 타입을 보호할지 공개할지 확신하지 못해 어중간하게 내놓은 설계에 불과하다.</p>\n<p><strong>구조체 감추기</strong></p>\n<p>ctxt, options, scratchDir 가 객체라면? 위의 예제처럼 줄줄이 사탕으로 엮어선 안된다.</p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>객체는 동작을 공개하고 자료를 숨긴다.</p>\n<ul>\n<li>기존 동작을 변경하지 않으면서 새 객체 타입을 추가하기 쉽다.</li>\n<li>기존 객체에 동작을 추가하기는 어렵다.</li>\n</ul>\n<p>자료구조는 별다른 동작 없이 자료를 노출한다.</p>\n<ul>\n<li>기존 자료 구조에 새 동작을 추가하기 쉽다.</li>\n<li>기존 함수에 새 자료 구조를 추가하기 어렵다.</li>\n</ul>\n<p>새로운 자료 타입을 추가하는 유연성이 필요하면 객체가 더 적합하다.</p>\n<p>새로운 동작을 추가하는 유연성이 필요하면 자료 구조와 절차적인 코드가 더 적합하다.</p>","tableOfContents":"<ul>\n<li><a href=\"#%EC%9E%90%EB%A3%8C-%EC%B6%94%EC%83%81%ED%99%94\">자료 추상화</a></li>\n<li><a href=\"#%EC%9E%90%EB%A3%8C%EA%B0%9D%EC%B2%B4-%EB%B9%84%EB%8C%80%EC%B9%AD\">자료/객체 비대칭</a></li>\n<li><a href=\"#%EB%94%94%EB%AF%B8%ED%84%B0-%EB%B2%95%EC%B9%99\">디미터 법칙</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>","frontmatter":{"title":"[Clean Code] 6.객체와 자료 구조","date":"2021年02月21日","description":"클린 코드 읽고 정리하기"}}},"pageContext":{"slug":"/2021-cleancode-1/CleanCode6/","previous":{"fields":{"slug":"/2021/새소년만난날/"},"frontmatter":{"title":"새소년 영접기 (with 배드램)"},"tableOfContents":"<ul>\n<li>\n<ul>\n<li>\n<p><a href=\"#%EC%84%9C%EB%A1%A0\">서론</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B3%B8%EB%A1%A0\">본론</a></p>\n<ul>\n<li><a href=\"#%EC%8B%A4%EC%A0%9C%EB%A1%9C-%EB%B3%B4%EB%8B%88-%EC%86%8C%EC%9C%A4%EC%9D%80-%EB%84%88%EB%AC%B4%EB%84%88%EB%AC%B4-%EC%9E%91%EA%B3%A0-%EC%86%8C%EC%A4%91%ED%95%9C-%EC%A1%B4%EC%9E%AC%EC%98%80%EB%8B%A4-\">실제로 보니 소윤은 너무너무 작고 소중한 존재였다. 😭</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B0%B0%EB%93%9C%EB%9E%A8\">배드램</a></p>\n<ul>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</li>\n</ul>"},"next":{"fields":{"slug":"/2021-cleancode-1/CleanCode4/"},"frontmatter":{"title":"[Clean Code] 4. 주석"},"tableOfContents":"<ul>\n<li><a href=\"#%EC%A3%BC%EC%84%9D%EC%9D%80-%EB%82%98%EC%81%9C-%EC%BD%94%EB%93%9C%EB%A5%BC-%EB%B3%B4%EC%99%84%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C%EB%8B%A4\">주석은 나쁜 코드를 보완하지 못한다</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%9D%98%EB%8F%84%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%9D%BC\">코드로 의도를 표현하라!</a></li>\n<li><a href=\"#%EC%A2%8B%EC%9D%80-%EC%A3%BC%EC%84%9D\">좋은 주석</a></li>\n<li><a href=\"#%EB%82%98%EC%81%9C-%EC%A3%BC%EC%84%9D\">나쁜 주석</a></li>\n</ul>"}}},"staticQueryHashes":["426816048","63159454"]}