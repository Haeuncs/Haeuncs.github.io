{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-cleancode-1/CleanCode10/","result":{"data":{"site":{"siteMetadata":{"title":"방가방가"}},"markdownRemark":{"id":"c56c8d94-7071-5680-b7cf-1068277c8f8c","excerpt":"클래스 체계 클래스를 정의하는 표준 자바 관례에서는 아래 순서에 맞춰 작성한다. 정적(static) 공개(public…","html":"<h1 id=\"클래스-체계\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%B2%B4%EA%B3%84\" aria-label=\"클래스 체계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 체계</h1>\n<p>클래스를 정의하는 표준 자바 관례에서는 아래 순서에 맞춰 작성한다.</p>\n<ol>\n<li>정적(static) 공개(public) 상수</li>\n<li>변수 목록</li>\n<li>정적 비공개 변수</li>\n<li>비공개 인스턴스 변수</li>\n<li>공개 함수</li>\n<li>비공개 함수 (자신을 호출하는 공개 함수 바로 뒤에)</li>\n</ol>\n<p><strong>캡슐화</strong></p>\n<p>변수와 유틸리티 함수는 가능한 공개하지 않는 편이 낫다. 함수를 protected 로 서언하여 테스트 코드에서 접근 할 수 있도록 해야한다. (swift 에서는 static 으로 해서 테스트코드에서 접근할 수 있도록 하는 것이랑 같은걸까?)</p>\n<h1 id=\"클래스는-작아야-한다\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%EC%9E%91%EC%95%84%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"클래스는 작아야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스는 작아야 한다!</h1>\n<p>함수와 마찬가지로 클래스도 작아야한다.</p>\n<p>클래스 이름은 해당 클래스 책임을 기술해야 한다. 예를 들어 Processor, Manager, Super 등과 같은 모호한 단어가 있다면 클래스가 여러 책임을 떠안았다는 증거이다.</p>\n<p><strong>단일 책임 원칙</strong></p>\n<p>클래스나 모듈을 변경할 이유가 하나, 단 하나뿐이어야 한다는 원칙</p>\n<p>큰 클래스 몇 개가 아니라 작은 클래스 여럿으로 이뤄진 시스템이 더 바람직하다. 작은 클래스는 각자 맡은 책임이 하나며, 변경할 이유가 하나며, 다른 작은 클래스와 협력해 시스템에 필요한 동작을 수행한다.</p>\n<p><strong>응집도</strong></p>\n<p>클래스는 인스턴스 변수 수가 작아야 한다.</p>\n<p>응집도가 높다는 말은 클래스에 속한 메서드와 변수가 서로 의존하며 논리적인 단위로 묶인다는 의미이다.</p>\n<p>‘함수를 작게, 매개변수 목록을 짧게’라는 전략을 따르다 보면 몇몇 메서드만이 사용하는 인스턴스 변수가 아주 많아진다. 이는 새로운 클래스로 쪼개야 한다는 신호이다.</p>\n<p>응집도가 높아지도록 변수와 메서드를 적절히 분리해 새로운 클래스 두세 개로 쪼개준다.</p>\n<p><strong>응집도를 유지하면 작은 클래스 여럿이 나온다</strong></p>\n<p>변수가 아주 많은 큰 함수 하나가 있다.</p>\n<p>큰 함수 일부를 작은 함수 하나로 빼내고 싶은데, 빼내려는 코드가 큰 함수에 정의된 변수 넷을 사용한다.</p>\n<p>그렇다면 변수 네 개를 새 함수에 인수로 넘겨야 옳은가?</p>\n<p><strong>아니다.</strong> 네 변수를 클래스의 인스턴스 변수로 승격한다면 새 함수는 인수가 필요 없다. 그만큼 함수를 쪼개기 쉬워진다.</p>\n<p><strong>하지만</strong> 이렇게 하면 클래스가 응집력을 잃고 몇몇 함수만 사용하는 인스턴스 변수가 많아진다.</p>\n<p><strong>그래서</strong> 독자적인 클래스로 분리한다.</p>\n<h1 id=\"변경하기-쉬운-클래스\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"변경하기 쉬운 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변경하기 쉬운 클래스</h1>\n<p><strong>변경으로부터 격리</strong></p>\n<p>구체적인 클래스와 추상 클래스가 있다.</p>\n<p>구체적인 클래스는 상세한 구현을 포함하고</p>\n<p>추상 클래스는 개념만 포함한다.</p>\n<p>상세한 구현에 의존하는 클라이언트 클래스는 구현이 바뀌면 위험에 빠진다.</p>\n<p>그래서 우리는 인터페이스와 추상 클래스를 사용해 구현이 미치는 영향을 격리한다.</p>\n<p>테스트가 가능할 정도로 시스템의 결합도를 낮추면 유연성과 재사용성도 더욱 높아진다.</p>\n<p>결합도가 낮다는 것은 시스템 요소가 다른 요소, 변경으로부터 격리되어 있다는 의미이다.</p>\n<p>시스템 요소가 서로 격리되어 있으면 각 요소를 이해하기 쉬워진다.</p>\n<p>이렇게 결합도를 최소로 줄이면 자연스럽게 또 다른 클래스 설계 원칙인 DIP(의존성 역전 원칙)를 따르는 클래스가 나온다.</p>","tableOfContents":"<ul>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%B2%B4%EA%B3%84\">클래스 체계</a></li>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%EC%9E%91%EC%95%84%EC%95%BC-%ED%95%9C%EB%8B%A4\">클래스는 작아야 한다!</a></li>\n<li><a href=\"#%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-%ED%81%B4%EB%9E%98%EC%8A%A4\">변경하기 쉬운 클래스</a></li>\n</ul>","frontmatter":{"title":"[Clean Code] 10.클래스","date":"2021年02月28日","description":"클린 코드 읽고 정리하기"}}},"pageContext":{"slug":"/2021-cleancode-1/CleanCode10/","previous":{"fields":{"slug":"/2021/ARCHIVE 2020 2/"},"frontmatter":{"title":"ARCHIVE 2021년 2월"},"tableOfContents":"<ul>\n<li><a href=\"#%EB%82%B4%EA%B0%80-%EB%B3%B8%EA%B1%B0\">내가 본거</a></li>\n</ul>"},"next":{"fields":{"slug":"/2021-cleancode-1/CleanCode7/"},"frontmatter":{"title":"[Clean Code] 7.오류 처리"},"tableOfContents":"<ul>\n<li><a href=\"#%ED%81%B4%EB%A6%B0%EC%BD%94%EB%93%9C-7%EC%9E%A5-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC\">클린코드 7장 오류 처리</a></li>\n<li><a href=\"#%EC%98%A4%EB%A5%98-%EC%BD%94%EB%93%9C%EB%B3%B4%EB%8B%A4-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">오류 코드보다 예외를 사용하라</a></li>\n<li><a href=\"#try-catch-finally-%EB%AC%B8%EB%B6%80%ED%84%B0-%EC%9E%91%EC%84%B1%ED%95%98%EB%9D%BC\">Try-Catch-Finally 문부터 작성하라</a></li>\n<li><a href=\"#%EB%AF%B8%ED%99%95%EC%9D%B8-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">미확인 예외를 사용하라</a></li>\n<li><a href=\"#%EC%98%88%EC%99%B8%EC%97%90-%EC%9D%98%EB%AF%B8%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%9D%BC\">예외에 의미를 제공하라</a></li>\n<li><a href=\"#%ED%98%B8%EC%B6%9C%EC%9E%90%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%B4-%EC%98%88%EC%99%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\">호출자를 고려해 예외 클래스를 정의하라</a></li>\n<li><a href=\"#%EC%A0%95%EC%83%81-%ED%9D%90%EB%A6%84%EC%9D%84-%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\">정상 흐름을 정의하라</a></li>\n<li><a href=\"#null%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\">null을 반환하지 마라</a></li>\n<li><a href=\"#null%EC%9D%84-%EC%A0%84%EB%8B%AC%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\">null을 전달하지 마라</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>"}}},"staticQueryHashes":["426816048","63159454"]}