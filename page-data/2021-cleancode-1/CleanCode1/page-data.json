{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-cleancode-1/CleanCode1/","result":{"data":{"site":{"siteMetadata":{"title":"2021"}},"markdownRemark":{"id":"57889709-8749-58ef-ba15-d7f6c1282074","excerpt":"클린 코드 1장 - 깨끗한 코드 클린 코드를 아예 처음 읽는 것은 아니고…","html":"<h1>클린 코드 1장 - 깨끗한 코드</h1>\n<p>클린 코드를 아예 처음 읽는 것은 아니고 2년전 쯤? 연구실에서 프로그래밍 관련 책들을 구입했을 때 클린 코드와 클린 아키텍처가 있었다. 그래서 잠깐 클린 코드와 클린 아키텍처를 봤었지만 책을 탐독하면서 읽은게 아니라 술술 대충 읽었어서 지금은 전혀 기억나지 않는 상태였다.</p>\n<p>그런 상태였는데 개발자 지인들과 함께 스터디를 하자는 이야기가 나와서 공부하고 정리할 겸 블로그에 연재 하려 한다.</p>\n<h1>1. 깨끗한 코드</h1>\n<h3>나쁜 코드</h3>\n<p>프로그래머라면 나쁜 코드로 고생한 경험이 있다. 왜? 어째서 그런 코드를 짰는가?</p>\n<p>급해서? 서두르느라, 업무가 밀려서 등등…</p>\n<p>쓰레기 코드라는 것을 알지만 안돌아가는 코드보다는 쓰레기가 좋다고 위로하고 나중에 정리하겠다고 다짐하겠지만 그 나중은 결코 오지 않는다.</p>\n<h3>나쁜 코드로 치르는 대가</h3>\n<p>쓰레기 코드에서 코드를 고칠 때마다 엉뚱한 곳에서 문제가 생긴다. 매번 얽히고설킨 코드를 해독해서 얽히고설킨 코드를 더한다. 시간이 지나면서 쓰레기 더미는 점점 높아지고 깊어지고 커진다. 청소할 방법이 없다.</p>\n<p>나쁜 코드가 쌓일수록 팀 생산성은 떨어진다.</p>\n<p><strong>원대한 재설계의 꿈</strong></p>\n<p>재설계를 시작, 기존 기능들을 모두 제공하고 그동안 기존 시스템에 추가되는 변경들 또한 따라잡아야 함.\n새 시스템이 기존 시스템을 따라잡을 때 쯤 초기 팀원들은 모두 팀을 떠났고 새로운 팀원들이 새 시스템을 설계하자고 나선다. 왜? 현재 시스템이 엉망이라서.</p>\n<p><strong>태도</strong></p>\n<p>일정에 쫓기더라도 대다수 관리자는 좋은 코드를 원한다. 그들은 일정과 요구사항을 강력하게 밀어붙이는 이유는 그들의 책임이기 때문이다. </p>\n<p><strong>좋은 코드를 사수하는 일은 프로그래머들의 책임이다.</strong></p>\n<p><strong>원초적 난제</strong></p>\n<p>기한을 맞추는 유일한 방법은 언제나 코드를 최대한 깨끗하게 유지하는 습관</p>\n<p><strong>깨끗한 코드라는 예술?</strong></p>\n<p>“깨끗한 코드를 어떻게 작성할까?” 깨끗한 코드가 무엇인지 모르면 깨끗한 코드를 만들려고 애써봤자 소용이 없다.</p>\n<p>깨끗한 코드를 작성하려면 ‘청결’이라는 감각을 활용해 자잘한 기법들을 적용하는 절제와 규율이 필요함</p>\n<p>열쇠는 ‘코드 감각’, 누구는 타고나거나 누구는 투쟁 끝에 얻는다. ‘코드 감각’이 있으면 좋은 코드와 나쁜 코드를 구분할 수 있고 절제와 규율을 적용해 나쁜 코드를 좋은 코드로 바꾸는 전략도 파악한다.</p>\n<p>깨끗한 코드를 작성하는 프로그래머는 빈 캔버스를 우아한 작품으로 바꿔가는 화가와 같다.</p>\n<p><strong>깨끗한 코드란?</strong></p>\n<p>비야네 스트롭스트룹</p>\n<ul>\n<li>우아하고 효율적인 코드</li>\n<li>논리가 간단해야 버그가 숨어들지 못한다.</li>\n<li>의존성을 최대한 줄여야 유지보수가 쉬워진다.</li>\n<li>오류는 명백한 전략에 의거해 철저히 처리한다.</li>\n<li>성능을 최적으로 유지해야 사람들이 원칙 없는 최적화로 코드를 망치려는 유혹에 빠지지 않는다.</li>\n<li>깨끗한 코드는 한 가지를 제대로 한다.</li>\n</ul>\n<p>그래디 부치</p>\n<ul>\n<li>깨끗한 코드는 단순하고 직접적이다.</li>\n<li>깨끗한 코드는 잘 쓴 문장처럼 읽힌다.</li>\n<li>깨끗한 코드는 결코 설계자의 의도를 숨기지 않는다.</li>\n<li>명쾌한 추상화와 단순한 제어문으로 가득하다.</li>\n</ul>\n<p>데이브 토마스</p>\n<ul>\n<li>깨끗한 코드는 작성자가 아닌 사람도 읽기 쉬고 고치기 쉽다.</li>\n<li>단위 테스트와 인수 테스트 케이스가 존재한다.</li>\n<li>깨끗한 코드에는 의미 있는 이름이 붙는다.</li>\n<li>특정 목적을 달성하는 방법은 하나만 제공한다.</li>\n<li>의존성은 최소이며 각 의존성을 명확히 정의한다. API 는 명확하며 최소로 줄였다.</li>\n<li>언어에 따라 필요한 모든 정보를 코드만으로 명확히 표현할 수 없기에 코드는 문학적으로 표현해야 마땅하다.</li>\n</ul>\n<p>테스트 케이스가 없는 코드는 깨끗한 코드가 아니다. 코드가 아무리 우아해도, 아무리 가독성이 높아도, 테스트 케이스가 없으면 깨끗하지 않다.</p>\n<p>마이클 페더스</p>\n<ul>\n<li>깨끗한 코드는 언제나 누군가 주의 깊게 짰다는 느낌을 준다.</li>\n<li>작성자가 이미 모든 사항을 고려했으므로. 고칠 궁리를 하다보면 언제나 제자리로 돌아온다.</li>\n<li>그리고는 누군가 남겨준 코드, 누군가 주의 깊게 짜놓은 작품에 감사를 느낀다.</li>\n</ul>\n<p>론 제프리스</p>\n<ul>\n<li>모든 테스트를 통과한다.</li>\n<li>중복이 없다.</li>\n<li>시스템 내 모든 설계 아이디어를 표현한다.</li>\n<li>클래스, 메서드, 함수 등을 최대한 줄인다.</li>\n</ul>\n<p>워드 커닝햄</p>\n<ul>\n<li>코드를 읽으면서 짐작했던 기능을 각 루틴이 그대로 수행한다면 깨끗한 코드</li>\n<li>코드가 그 문제를 풀기 위한 언어처럼 보인다면 아름다운 코드</li>\n</ul>\n<h3>보이스카우트 규칙</h3>\n<blockquote>\n<p>캠프장은 처음 왔을 때보다 더 깨끗하게 해놓고 떠나라.</p>\n</blockquote>\n<p>한꺼번에 많은 시간과 노력을 투자해 코드를 정리할 필요가 없다. 변수 이름 하나를 개선하고, 조금 긴 함수 하나를 분할하고, 약간의 중복을 제거하고, 복잡한 if문을 하나로 정리하면 충분하다.</p>\n<h1>끝</h1>\n<p>프로그래머 사이에서 바이블같은 책이라 그런지 와닿는 문장들이 많다.\n책에 있던 ‘시간이 지날수록 코드가 좋아지는 프로젝트에서 작업한다고 상상해보라!’ 라는 문장을 읽고 정말 설레었다. 🤤 내가 쓴 코드는 모두 애착가는 코드들이기 때문에 이 친구들을 빨리 개선시켜주고 싶은 엄마의 마음.. 결론은 깨끗한 코드를 작성하기 위해 연습하자!</p>","frontmatter":{"title":"[Clean Code] 1. 깨끗한 코드","date":"2021年01月30日","description":"클린 코드 읽고 정리하기"}}},"pageContext":{"slug":"/2021-cleancode-1/CleanCode1/","previous":{"fields":{"slug":"/2021/2021계획/"},"frontmatter":{"title":"2021 목표 🏞"}},"next":{"fields":{"slug":"/2021-cleancode-1/CleanCode2/"},"frontmatter":{"title":"[Clean Code] 2. 의미 있는 이름"}}}},"staticQueryHashes":["426816048","63159454"]}