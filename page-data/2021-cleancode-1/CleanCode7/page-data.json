{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-cleancode-1/CleanCode7/","result":{"data":{"site":{"siteMetadata":{"title":"2021"}},"markdownRemark":{"id":"fa44c202-c7c4-5f0e-80de-e7939b1a3b60","excerpt":"…","html":"<h1 id=\"7-오류-처리\" style=\"position:relative;\"><a href=\"#7-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC\" aria-label=\"7 오류 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 오류 처리</h1>\n<h2 id=\"오류-코드보다-예외를-사용하라\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EC%BD%94%EB%93%9C%EB%B3%B4%EB%8B%A4-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"오류 코드보다 예외를 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 코드보다 예외를 사용하라</h2>\n<p>옛날에는 예외를 지원하지 않는 프로그래밍 언어가 많았다. 그래서 오류 플래그를 설정하거나 호출자에게 오류 코드를 반환하는 방법을 사용했었다.</p>\n<p>이와 같은 방법을 사용하면 호출자 코드가 복잡해지고 함수 호출과 동시에 오류를 확인해야한다.</p>\n<p>오류가 발생하면 예외를 던져 논리와 오류 처리 코드를 분리하여 호출자 코드가 더 깔끔해지도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Bad\npublic class DeviceController {\n  ...\n  public void sendShutDown() {\n    DeviceHandle handle = getHandle(DEV1);\n    // Check the state of the device\n    if (handle != DeviceHandle.INVALID) {\n      // Save the device status to the record field\n      retrieveDeviceRecord(handle);\n      // If not suspended, shut down\n      if (record.getStatus() != DEVICE_SUSPENDED) {\n        pauseDevice(handle);\n        clearDeviceWorkQueue(handle);\n        closeDevice(handle);\n      } else {\n        logger.log(&quot;Device suspended. Unable to shut down&quot;);\n      }\n    } else {\n      logger.log(&quot;Invalid handle for: &quot; + DEV1.toString());\n    }\n  }\n  ...\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Good\npublic class DeviceController {\n  ...\n  public void sendShutDown() {\n    try {\n      tryToShutDown();\n    } catch (DeviceShutDownError e) {\n      logger.log(e);\n    }\n  }\n     \n  private void tryToShutDown() throws DeviceShutDownError {\n    DeviceHandle handle = getHandle(DEV1);\n    DeviceRecord record = retrieveDeviceRecord(handle);\n    pauseDevice(handle);\n    clearDeviceWorkQueue(handle);\n    closeDevice(handle);\n  }\n   \n  private DeviceHandle getHandle(DeviceID id) {\n    ...\n    throw new DeviceShutDownError(&quot;Invalid handle for: &quot; + id.toString());\n    ...\n  }\n  ...\n}</code></pre></div>\n<h2 id=\"try-catch-finally-문부터-작성하라\" style=\"position:relative;\"><a href=\"#try-catch-finally-%EB%AC%B8%EB%B6%80%ED%84%B0-%EC%9E%91%EC%84%B1%ED%95%98%EB%9D%BC\" aria-label=\"try catch finally 문부터 작성하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Try-Catch-Finally 문부터 작성하라</h2>\n<p>옛날에는 메서드를 선언할 때 메서드가 반환하는 예외를 모두 열거했다. 하지만 지금은 확인된 예외를 잘 사용하지 않는다.</p>\n<p>확인된 오류가 치르는 비용에 상응하는 이익을 제공하는지 따져봐야 한다.</p>\n<p>확인된 예외는 OCP 를 위반한다.</p>\n<p>메서드에서 확인된 예외를 던졌는데 catch 블록이 세 단계 위에 있다면 그 사이 메서드 모두가 선언부에 해당 예외를 정의해 한다.</p>\n<p>throws 경로에 위치하는 모든 함수가 최하위 함수에서 던지는 예외를 알아야하기 때문에 캡슐화가 깨진다.</p>\n<p>아주 중요한 라이브러리의 경우 모든 예외를 잡아야하지만 일반적인 애플리케이션에서는 의존성이라는 비용이 이익보다 크다.</p>\n<h2 id=\"미확인-예외를-사용하라\" style=\"position:relative;\"><a href=\"#%EB%AF%B8%ED%99%95%EC%9D%B8-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"미확인 예외를 사용하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미확인 예외를 사용하라</h2>\n<p>오류 메시지에 정보를 담아 예외와 함께 던져라</p>\n<h2 id=\"예외에-의미를-제공하라\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8%EC%97%90-%EC%9D%98%EB%AF%B8%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%9D%BC\" aria-label=\"예외에 의미를 제공하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외에 의미를 제공하라</h2>\n<p>오류를 분류하는 방법은 수없이 많다.</p>\n<p>오류가 발생한 위치 - 컴포넌트로 분류\n유형으로 분리 - 디바이스 실패, 네트워크 실패. 프로그래밍 오류 등으로 분류\n하지만 오류를 정의할 때 가장 중요한 것은 오류를 잡아내는 방법이다.</p>\n<h2 id=\"호출자를-고려해-예외-클래스를-정의하라\" style=\"position:relative;\"><a href=\"#%ED%98%B8%EC%B6%9C%EC%9E%90%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%B4-%EC%98%88%EC%99%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\" aria-label=\"호출자를 고려해 예외 클래스를 정의하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>호출자를 고려해 예외 클래스를 정의하라</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Bad\n  ACMEPort port = new ACMEPort(12);\n  try {\n    port.open();\n  } catch (DeviceResponseException e) {\n    reportPortError(e);\n    logger.log(&quot;Device response exception&quot;, e);\n  } catch (ATM1212UnlockedException e) {\n    reportPortError(e);\n    logger.log(&quot;Unlock exception&quot;, e);\n  } catch (GMXError e) {\n    reportPortError(e);\n    logger.log(&quot;Device response exception&quot;);\n  } finally {\n    ...\n  }</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Good\nLocalPort port = new LocalPort(12);\ntry {\n  port.open();\n} catch (PortDeviceFailure e) {\n  reportError(e);\n  logger.log(e.getMessage(), e);\n} finally {\n  ...\n}\n\npublic class LocalPort {\n  private ACMEPort innerPort;\n  public LocalPort(int portNumber) {\n    innerPort = new ACMEPort(portNumber);\n  }\n  \n  public void open() {\n    try {\n      innerPort.open();\n    } catch (DeviceResponseException e) {\n      throw new PortDeviceFailure(e);\n    } catch (ATM1212UnlockedException e) {\n      throw new PortDeviceFailure(e);\n    } catch (GMXError e) {\n      throw new PortDeviceFailure(e);\n    }\n  }\n  ...\n}</code></pre></div>\n<h2 id=\"정상-흐름을-정의하라\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%83%81-%ED%9D%90%EB%A6%84%EC%9D%84-%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\" aria-label=\"정상 흐름을 정의하라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정상 흐름을 정의하라</h2>\n<p>앞 절의 내용을 따르면 비지니스 논리와 오류 처리가 잘 분리된 코드가 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Bad\n  try {\n    MealExpenses expenses = expenseReportDAO.getMeals(employee.getID());\n    m_total += expenses.getTotal();\n  } catch(MealExpensesNotFound e) {\n    m_total += getMealPerDiem();\n  }</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Good\n  // caller logic.\n  ...\n  MealExpenses expenses = expenseReportDAO.getMeals(employee.getID());\n  m_total += expenses.getTotal();\n  ...\n  \n  public class PerDiemMealExpenses implements MealExpenses {\n    public int getTotal() {\n      // return the per diem default\n    }\n  }\n  \n  // 이해를 돕기 위해 직접 추가한 클래스\n  public class ExpenseReportDAO {\n    ...\n    public MealExpenses getMeals(int employeeId) {\n      MealExpenses expenses;\n      try {\n        expenses = expenseReportDAO.getMeals(employee.getID());\n      } catch(MealExpensesNotFound e) {\n        expenses = new PerDiemMealExpenses();\n      }\n      \n      return expenses;\n    }\n    ...\n  }</code></pre></div>\n<h2 id=\"null을-반환하지-마라\" style=\"position:relative;\"><a href=\"#null%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\" aria-label=\"null을 반환하지 마라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>null을 반환하지 마라</h2>\n<p>null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Bad\n  List&lt;Employee&gt; employees = getEmployees();\n  if (employees != null) {\n    for(Employee e : employees) {\n      totalPay += e.getPay();\n    }\n  }</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Good\nList&lt;Employee&gt; employees = getEmployees();\nfor(Employee e : employees) {\n  totalPay += e.getPay();\n}\n\npublic List&lt;Employee&gt; getEmployees() {\n  if( .. there are no employees .. )\n    return Collections.emptyList();\n  }\n}</code></pre></div>\n<h2 id=\"null을-전달하지-마라\" style=\"position:relative;\"><a href=\"#null%EC%9D%84-%EC%A0%84%EB%8B%AC%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\" aria-label=\"null을 전달하지 마라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>null을 전달하지 마라</h2>\n<p>메서드에서 null을 반환하는 방식도 나쁘지만 메서드로 null을 전달하는 방식은 더 나쁘다.</p>\n<p>대다수의 프로그래밍 언어는 호출자가 실수로 넘가는 null을 적절히 처리하는 방법이 없어 애초에 null을 넘기지 못하도록 금지하는 정책이 합리적이다.</p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>깨끗한 코드는 읽기도 좋아야하지만 안정성도 높아야 한다. 오류 처리를 프로그램 논리와 분리하면 튼튼하고 깨끗한 코드를 작성할 수 있다.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2021-cleancode-1/CleanCode7/#7-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC\">7. 오류 처리</a></p>\n<ul>\n<li><a href=\"/2021-cleancode-1/CleanCode7/#%EC%98%A4%EB%A5%98-%EC%BD%94%EB%93%9C%EB%B3%B4%EB%8B%A4-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">오류 코드보다 예외를 사용하라</a></li>\n<li><a href=\"/2021-cleancode-1/CleanCode7/#try-catch-finally-%EB%AC%B8%EB%B6%80%ED%84%B0-%EC%9E%91%EC%84%B1%ED%95%98%EB%9D%BC\">Try-Catch-Finally 문부터 작성하라</a></li>\n<li><a href=\"/2021-cleancode-1/CleanCode7/#%EB%AF%B8%ED%99%95%EC%9D%B8-%EC%98%88%EC%99%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">미확인 예외를 사용하라</a></li>\n<li><a href=\"/2021-cleancode-1/CleanCode7/#%EC%98%88%EC%99%B8%EC%97%90-%EC%9D%98%EB%AF%B8%EB%A5%BC-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%9D%BC\">예외에 의미를 제공하라</a></li>\n<li><a href=\"/2021-cleancode-1/CleanCode7/#%ED%98%B8%EC%B6%9C%EC%9E%90%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%B4-%EC%98%88%EC%99%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\">호출자를 고려해 예외 클래스를 정의하라</a></li>\n<li><a href=\"/2021-cleancode-1/CleanCode7/#%EC%A0%95%EC%83%81-%ED%9D%90%EB%A6%84%EC%9D%84-%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\">정상 흐름을 정의하라</a></li>\n<li><a href=\"/2021-cleancode-1/CleanCode7/#null%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\">null을 반환하지 마라</a></li>\n<li><a href=\"/2021-cleancode-1/CleanCode7/#null%EC%9D%84-%EC%A0%84%EB%8B%AC%ED%95%98%EC%A7%80-%EB%A7%88%EB%9D%BC\">null을 전달하지 마라</a></li>\n<li><a href=\"/2021-cleancode-1/CleanCode7/#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[Clean Code] 7.오류처리","date":"2021年03月07日","description":"클린 코드 읽고 정리하기"}}},"pageContext":{"slug":"/2021-cleancode-1/CleanCode7/","previous":{"fields":{"slug":"/2021-cleancode-1/CleanCode10/"},"frontmatter":{"title":"[Clean Code] 10.클래스"}},"next":{"fields":{"slug":"/2021/CleanSwift/CleanSwift/"},"frontmatter":{"title":"Clean Swift"}}}},"staticQueryHashes":["426816048","63159454"]}