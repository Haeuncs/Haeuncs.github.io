{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-10-20-Flask이용해서 딥러닝 학습 모델 API 만들기/","result":{"data":{"site":{"siteMetadata":{"title":"@_@"}},"markdownRemark":{"id":"d86ee1f5-b855-5bce-9ce5-5217874ae9e8","excerpt":"나는 왜 Flask 를 사용했는가 ? 딥러닝으로 학습되어 생성된 h5 파일을 서버에 올려 동작하도록 했어야 했습니다. 하지만 개발을 할면서 내가 서버를 구축할 일이 없었고 API 를 사용했지 API 를 만들일은 없었지만 개인 프로젝트를 위해서 API…","html":"<h1>나는 왜 Flask 를 사용했는가 ?</h1>\n<p>딥러닝으로 학습되어 생성된 h5 파일을 서버에 올려 동작하도록 했어야 했습니다.</p>\n<p>하지만 개발을 할면서 내가 서버를 구축할 일이 없었고 API 를 사용했지 API 를 만들일은 없었지만 개인 프로젝트를 위해서 API 를 만들어야 했고 그래서 가장 친근한 언어인 Python을 사용하고 Flask 프레임워크를 사용해서 API 를 만들었습니다.</p>\n<p>저와 같은 서버에 관한 지식이 1도 없는 분들을 위해서 작성해봤습니다 🙏</p>\n<hr>\n<h1>시작</h1>\n<p>Flask 의 예제 코드를 보면 Flask 가 쉽다는 것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World!\"</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>만약 post 로 보낸 body를 읽고 싶다면 아래와 같이 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n        review <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">[</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> review</code></pre></div>\n<p>body 의 key 에 text를 넣고 value 에 원하는 값을 넣으면 그 값이 리턴될 것입니다.</p>\n<h1><img src=\"/image/191020/image1.png\" alt=\"image1\"></h1>\n<h1>딥러닝 h5 파일 실행하기</h1>\n<p>여기까지 잘 왔다면 50%는 해결되었습니다.</p>\n<p>이제 딥러닝 모델 h5를 실행 시켜봅시다.</p>\n<p>저는 여기서 시간이 오래걸렸는데 기존에 파이썬 코드로 h5 로 예측하는 방법를 사용하면 오류가 나면서 flask 실행이 중지되거나 오류가 나타났었습니다.</p>\n<p>그래서 아래의 방식으로 h5 파일을 로드해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> CustomObjectScope\n<span class=\"token keyword\">from</span> keras<span class=\"token punctuation\">.</span>initializers <span class=\"token keyword\">import</span> glorot_uniform\n<span class=\"token keyword\">from</span> tensorflow<span class=\"token punctuation\">.</span>python<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>backend <span class=\"token keyword\">import</span> set_session\n<span class=\"token keyword\">from</span> tensorflow<span class=\"token punctuation\">.</span>python<span class=\"token punctuation\">.</span>keras<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> load_model\n\n<span class=\"token keyword\">with</span> CustomObjectScope<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'GlorotUniform'</span><span class=\"token punctuation\">:</span> glorot_uniform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sess <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>compat<span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    set_session<span class=\"token punctuation\">(</span>sess<span class=\"token punctuation\">)</span>\n    model <span class=\"token operator\">=</span> load_model<span class=\"token punctuation\">(</span><span class=\"token string\">'./모델이 저장된 path.h5'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 저장된 모델 로딩</span>\n    model<span class=\"token punctuation\">.</span>_make_predict_function<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    graph <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>get_default_graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 모델을 부르고 서버로 데이터가 넘어올 때 전처리 -> 모델을 사용하여 예측하면 예측값이 제대로 옵니다.</p>\n<p>data는 전처리된 값으로 모델을 실행시킬 input 값</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n        value <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">[</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">]</span>\n        data <span class=\"token operator\">=</span> value 를 전처리한 값\n        <span class=\"token keyword\">global</span> sess\n        <span class=\"token keyword\">global</span> graph\n        <span class=\"token keyword\">with</span> graph<span class=\"token punctuation\">.</span>as_default<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            set_session<span class=\"token punctuation\">(</span>sess<span class=\"token punctuation\">)</span>\n            score <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> score</code></pre></div>\n<p>응답으로 예측된 값 리턴 됩니다 !_!</p>\n<h1>서버에 Flask 올리기</h1>\n<p>이렇게 확인이 완료 되었으면 Amazon web service (AWS)에 서버를 생성해서 이 프로그램을 올려 봅시다.</p>\n<h4>🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥 이 때 주의할 점은 !! 🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 코드를</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host<span class=\"token operator\">=</span><span class=\"token string\">\"0.0.0.0\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>으로 변경해줍니다.</p>\n<p>host 를 설정해주지 않으면 로컬에서만 동작하기 때문에 외부에서 서버 IP 를 통해서 접속하려면 host 를 0.0.0.0으로 설정해야합니다.</p>\n<p>서버를 시작하기 전에 필요한 라이브러리를 requirements.txt 으로 만들어서 현재 개발 환경을 세팅합니다.</p>\n<p>터미널에</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">pip3 freeze <span class=\"token operator\">></span> requirements<span class=\"token punctuation\">.</span>txt</code></pre></div>\n<p>를 치면 txt 파일이 생성됩니다.</p>\n<p><a href=\"https://aws.amazon.com/ko/\">https://aws.amazon.com/ko/</a></p>\n<p>AWS 사이트에 접속하고 가입을 합시다.</p>\n<p>AWS 를 사용하는 이유는 AWS 프리 티어로 1년동안 사용할 수 있는 클라우드를 제공하니 초보자들이 사용하기 좋습니다.</p>\n<h2>검색창에 EC2를 검색해서 아래와 같은 화면을 찾습니다.</h2>\n<p><img src=\"/image/191020/image2.png\" alt=\"image2\"></p>\n<h2>우분투 서버를 선택합니다</h2>\n<p><img src=\"/image/191020/image3.png\" alt=\"image3\"></p>\n<p>단계 2부터 5까지 다음을 눌러주시고</p>\n<h2>Flask 를 실행하는 포트 5000으로 접속하기 위해서 <strong>단계 6 보안 그룹 구성</strong>에 그림과 같이 <strong>포트 5000번</strong>을 할당</h2>\n<p><img src=\"/image/191020/image6.png\" alt=\"image6\"></p>\n<h2>키페어</h2>\n<p><img src=\"/image/191020/image7.png\" alt=\"image7\"></p>\n<p>그리고 생성을 할 때 키페어 이름을 정하고 싶으신 것으로 정한 후 키 페어를 다운로드 하면 pem 포맷의 파일이 다운 받아집니다.</p>\n<p>이 파일은 우리가 사용하는 로컬 터미널에서 원격 서버 터미널로 엑세스할 때 사용하기 때문에 위치를 꼭 기억합니다.</p>\n<p>이렇게 되면 생성이 되었습니다.</p>\n<p><img src=\"/image/191020/image11.png\" alt=\"image11\"></p>\n<p>콘솔에 들어가면 인스턴스에 방금 만든 것이 있을 텐데 <strong>인스턴스 시작</strong>을 눌러 실행을 시킨 후 <strong>연결</strong>을 눌러 <strong>인스턴스 엑세스 방법</strong>을 따르면 원격 서버에 접속이 됩니다. 접속이 되셨다면 원격 서버를 생성하는 단계가 끝났습니다 👏</p>\n<h2>아래부터는 인스턴스 콘솔 화면 아래에 설명에 있는 퍼블릭 DNS와 IPv4 퍼블릭 IP 를 알고 계셔야 합니다.</h2>\n<h2><img src=\"/image/191020/image12.png\" alt=\"image12\"></h2>\n<p>그럼 우리의 로컬에 있는 Flask 실행파일과 학습 모델과 이전에 만든 requirements.txt 을 <strong>압축</strong>하여 원격 서버로 전송해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">scp -i &quot;pem포맷의 엑세스 파일 경로&quot; &quot;방금 압축한 파일 경로&quot; ubuntu@여기에는 퍼블릭 DNS(IPv4) 를 적어줍니다.:여기에는 원격에 저장될 경로를 작성해줍니다.</code></pre></div>\n<p>아래 처럼 작성하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">scp -i serverKey.pem sentimentVer0.0.zip ubuntu@여기는퍼블릭:~/;</code></pre></div>\n<p>원격에 접속해서 확인해보면 제대로 파일이 전송된 것을 알 수 있습니다. Yeah~~</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">unzip zip파일</code></pre></div>\n<p>을 실행해서 전송한 zip 파일을 풀고 파이썬을 설치하고 requirements.txt 에 작성된 라이브러리를 설치하기 위해 아래와 같은 명령을 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pip3 install -r requirements.txt</code></pre></div>\n<p>이제 우리가 만든 flask 파이썬 파일을 실행하면 아래와 같이 실행될 것입니다 👏👏👏</p>\n<p><img src=\"/image/191020/image9.png\" alt=\"image9\"></p>\n<p>이제 어느 기기에서나 AWS 콘솔에 IPv4 퍼블릭 IP ip 주소를 통해서 원격으로 접속할 수 있습니다.</p>\n<p>postman 으로 원격 서버로 API를 요청한 결과! 제대로 작동합니다 👏👏👏👏👏👏👏👏👏</p>\n<p><img src=\"/image/191020/image10.png\" alt=\"image10\"></p>\n<h2>Any question?🙋‍</h2>\n<p>코드에 문제가 있거나 어떤 질문이든 편하게 메일을 보내주세요!</p>\n<p>Please email me with any questions or concerns! 😃<br/>\n💌 : haeun.developer@gmail.com</p>","frontmatter":{"title":"Flask이용해서 딥러닝 학습 모델 API 만들기","date":"October 20, 2019","description":null}}},"pageContext":{"slug":"/2019-10-20-Flask이용해서 딥러닝 학습 모델 API 만들기/","previous":{"fields":{"slug":"/2019-10-13-js 딕셔너리 값 존재하는지 확인하기/"},"frontmatter":{"title":"js 딕셔너리 값 존재하는지 확인하기"}},"next":{"fields":{"slug":"/2019-11-01-TIL_01_Reactjs로 얼굴 인식하고 블러처리하기/"},"frontmatter":{"title":"TIL_01_Reactjs로 얼굴 인식하고 블러처리하기"}}}}}