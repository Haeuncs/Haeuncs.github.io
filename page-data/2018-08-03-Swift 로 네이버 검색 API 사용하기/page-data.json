{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-08-03-Swift 로 네이버 검색 API 사용하기/","result":{"data":{"site":{"siteMetadata":{"title":"@_@"}},"markdownRemark":{"id":"69e8249f-90d6-5ab4-8b67-250367174c04","excerpt":"이 포스트는 Swift4를 기준으로 작성하였습니다.\nSwift에서 네이버 도서 API 공식 문서는 네이버 여기서 볼 수 있습니다. 네이버 공식 문서에 자바로 작성된 코드 밖에 없고 구글링을 해도 swift 예제가 안나와서 작성하게되었습니다. SWIFT 에서 네이버 검색 API…","html":"<p>이 포스트는 Swift4를 기준으로 작성하였습니다.<br/>\nSwift에서 네이버 도서 API 공식 문서는 <a href=\"https://developers.naver.com/docs/search/book/\">네이버</a> 여기서 볼 수 있습니다.</p>\n<p>네이버 공식 문서에 자바로 작성된 코드 밖에 없고 구글링을 해도 swift 예제가 안나와서 작성하게되었습니다.</p>\n<h2>SWIFT 에서 네이버 검색 API 사용하기 - 서론</h2>\n<p>준비 사항은 네이버 공식 문서의 ‘1. 준비 사항’ 를 따라 애플리케이션을 등록하고 API 사용에 ‘검색’ 을 추가하면 API 준비가 됩니다.</p>\n<p><img src=\"/assets/images/08-05/08-05-1.png\" alt=\"애플리케이션 등록\"></p>\n<blockquote>\n<p>애플리케이션을 새로 만들면 애플리케이션 정보를 얻을 수 있습니다.</p>\n</blockquote>\n<p><img src=\"/assets/images/08-05/08-05-2.png\" alt=\"애플리케이션 api 43정\"></p>\n<blockquote>\n<p>사용 API에 검색을 추가합니다.</p>\n</blockquote>\n<h2>SWIFT 에서 네이버 검색 API 사용하기 - 본론</h2>\n<p>네이버에서는 JSON 과 XML 두 가지 출력 포맷을 제공합니다.</p>\n<p>이 포스트에서는 JSON 로 받았지만 XML 과 크게 다르지 않습니다.</p>\n<p>Swift에서 URLSession 문서는 <a href=\"https://developer.apple.com/documentation/foundation/urlsession#see-also\">docs</a> 여기서 볼 수 있습니다.</p>\n<h3>소스코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">callURL</span><span class=\"token punctuation\">(</span>url1<span class=\"token punctuation\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>search <span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//💥💥💥💥본인의 Naver 애플리케이션 정보를 작성!!!💥💥💥💥</span>\n<span class=\"token keyword\">let</span> <span class=\"token builtin\">ClientID</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"네이버에서 제공받은 clientID\"</span>\n<span class=\"token keyword\">let</span> <span class=\"token builtin\">ClientSecret</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"네이버에서 제공받은 clientSecret\"</span>\n\n    <span class=\"token keyword\">let</span> addQuery <span class=\"token operator\">=</span> url1<span class=\"token operator\">+</span>search\n    <span class=\"token keyword\">let</span> encoded <span class=\"token operator\">=</span> addQuery<span class=\"token punctuation\">.</span><span class=\"token function\">addingPercentEncoding</span><span class=\"token punctuation\">(</span> withAllowedCharacters<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSCharacterSet</span><span class=\"token punctuation\">.</span>urlQueryAllowed<span class=\"token punctuation\">)</span>        <span class=\"token comment\">//한글 검색어도 사용할 수 있도록 함</span>\n\n    <span class=\"token comment\">//Request</span>\n    <span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> <span class=\"token function\">URLRequest</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> encoded<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n    request<span class=\"token punctuation\">.</span>httpMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"GET\"</span>                 <span class=\"token comment\">//Naver 도서 API는 GET</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ClientID</span><span class=\"token punctuation\">,</span>forHTTPHeaderField<span class=\"token punctuation\">:</span> <span class=\"token string\">\"X-Naver-Client-Id\"</span><span class=\"token punctuation\">)</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ClientSecret</span><span class=\"token punctuation\">,</span>forHTTPHeaderField<span class=\"token punctuation\">:</span> <span class=\"token string\">\"X-Naver-Client-Secret\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">//Session</span>\n    <span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token builtin\">URLSessionConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span>\n    <span class=\"token keyword\">let</span> session <span class=\"token operator\">=</span> <span class=\"token function\">URLSession</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//Task</span>\n    <span class=\"token keyword\">let</span> task <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">dataTask</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n        <span class=\"token comment\">//통신 성공</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> data <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">Encoding</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Encoding</span><span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">.</span>rawValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n\n            <span class=\"token builtin\">DispatchQueue</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span>async <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Json_TextView</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> str\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//통신 실패</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> error <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>localizedDescription<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    task<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>SWIFT 에서 네이버 검색 API 사용하기 - 실행결과</h2>\n<p><img src=\"/assets/images/08-05/front.png\" alt=\"애플리케이션\">\n<img src=\"/assets/images/08-05/result.png\" alt=\"애플리케이션\"></p>\n<h2>전체 소스 코드 (github)</h2>\n<p><a href=\"https://github.com/Haeuncs/Swift_github_post/tree/master/SWIFT_2_Naver_Books_API\">GitHub</a> 여기서 볼 수 있습니다.</p>\n<h2>Any question?🙋‍</h2>\n<p>Please email me with any questions or concerns! 😃<br/>\n💌 : sch.haeun@gmail.com</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","frontmatter":{"title":"2. Swift 로 네이버 검색 API 사용하기","date":"August 05, 2018","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018-08-03-Swift 로 네이버 검색 API 사용하기/","previous":null,"next":{"fields":{"slug":"/2018-08-09-네이버 도서 API 이미지 편법으로 크게 받아오기/"},"frontmatter":{"title":"네이버 도서 API 이미지 편법(?)으로 크게 받아오기"}}}}}