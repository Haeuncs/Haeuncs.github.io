{"componentChunkName":"component---src-templates-blog-post-js","path":"/Delegate-Notification-KVO/Delegate vs Notification vs KVO/","result":{"data":{"site":{"siteMetadata":{"title":"2021"}},"markdownRemark":{"id":"5b5c0472-b9e1-5a45-819d-88dca5e2fdd9","excerpt":"Delegate vs Notification vs KVO 왜 Swift…","html":"<h1 id=\"delegate-vs-notification-vs-kvo\" style=\"position:relative;\"><a href=\"#delegate-vs-notification-vs-kvo\" aria-label=\"delegate vs notification vs kvo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Delegate vs Notification vs KVO</h1>\n<p>왜 Swift 에는 이러한 세가지 패턴들이 있을까요?</p>\n<p>바로 특정 이벤트가 발생했을 때 다른 객체(혹은 다수의 객체들)에게 알려주고 싶을 때 사용합니다. </p>\n<p>즉 객체 간 소통이 필요할 때 사용합니다.</p>\n<p>쉽게 예시를 들어봅시다.</p>\n<p>로그인한 유저가 로그아웃을 하면 그에 따라 다른 화면에서 이벤트 발생을 받아 그에 따른 화면 처리를 할 때 사용할 수 있습니다.</p>\n<h2 id=\"delegate\" style=\"position:relative;\"><a href=\"#delegate\" aria-label=\"delegate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Delegate</h2>\n<p>프로토콜을 정의하여 사용합니다.</p>\n<blockquote>\n<p>프로토콜은 특정 작업이나 기능에 맞게 메서드, 속성과 같은 요구 사항들의 청사진(blueprint)를 정의하고 이러한 요구 사항들을 실제로 구현하기 위해서 class, struct, enum 에서 프로토콜을 따라 구현</p>\n</blockquote>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ul>\n<li>재사용할 수 있는 코드를 작성할 수 있음</li>\n<li>객체와 객체간의 연결로 추적이 쉽다</li>\n</ul>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ul>\n<li>MVC 의 단점인 massive view controller 가 되기 쉽다. (코드가 많다)</li>\n<li>delegate 사용을 위해서 구현해야하는 코드가 많다.</li>\n<li>다수의 객체들에게 이벤트를 호출하는 방식이 비효율적임</li>\n<li>delegate 프로퍼티 선언 시 참조 순환을 막기 위해 weak으로 선언해야 함</li>\n</ul>\n<h3 id=\"notification\" style=\"position:relative;\"><a href=\"#notification\" aria-label=\"notification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Notification</h3>\n<p>NotificationCenter 을 사용하여 구독한 객체들에게 이벤트 발생을 알린다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">NSNotification</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">Name</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> genderChanged <span class=\"token operator\">=</span> <span class=\"token builtin\">Notification</span><span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"genderChanged\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">NotificationCenter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">:</span> #<span class=\"token function\">selector</span><span class=\"token punctuation\">(</span>reloadGender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>genderChanged<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// post 되면 addObserver한 모든 객체의 이벤트가 발생</span>\n<span class=\"token keyword\">let</span> notiCenter <span class=\"token operator\">=</span> <span class=\"token builtin\">NotificationCenter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span>\nnotiCenter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>genderChanged<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"장점-1\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90-1\" aria-label=\"장점 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ul>\n<li>옵저버에 추가한 다수의 객체들에게 동시에 이벤트를 발생을 알릴 수 있음</li>\n<li>짧은 코드로 실행시킬 수 있음</li>\n</ul>\n<h3 id=\"단점-1\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90-1\" aria-label=\"단점 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ul>\n<li>이벤트가 발생했다는 것만 알 수 있고 별도의 값을 전달 받지는 않음</li>\n<li>많은 NotificationCenter 사용 시 코드의 흐름을 읽기 어려움</li>\n</ul>\n<h3 id=\"kvo\" style=\"position:relative;\"><a href=\"#kvo\" aria-label=\"kvo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KVO</h3>\n<p>값의 변화를 감지할 때 사용한다. 예로들어 collectionView의 contentsize 의 값 변화를 감지할 때 사용한다. 이러한 애플 API 내의 변화를 감지할 때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> observer<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSKeyValueObservation</span><span class=\"token operator\">?</span>\n\n<span class=\"token keyword\">deinit</span> <span class=\"token punctuation\">{</span>\n    observer<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">invalidate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nobserver <span class=\"token operator\">=</span> collectionView<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>\\<span class=\"token punctuation\">.</span>contentSize<span class=\"token punctuation\">,</span> option<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">weak</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>collect<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Custom KVO 방식은 아래를 참조하여 작성하면 된다.</p>\n<p><a href=\"https://www.hackingwithswift.com/example-code/language/what-is-key-value-observing\">What is key-value observing?</a></p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>\n<p>KVO: 한 객체가 다른 객체의 프로퍼티를 관찰하여 변경 사항을 찾을 수 있는 패턴</p>\n<ul>\n<li><strong>프로퍼티의 상태에 반응</strong>하기 때문에 <strong><em>프로퍼티의 변화를 감지할 때 사용</em></strong></li>\n</ul>\n</li>\n<li>\n<p>Notification: <strong>다수의 객체에게 동시에 이벤트 발생</strong>을 알릴 수 있다.</p>\n<ul>\n<li>다수의 객체가 이벤트 발생을 받고 뷰를 변경하는 경우에서 사용할 수 있다.</li>\n<li><strong>1:다</strong></li>\n</ul>\n</li>\n<li>\n<p>Delegate: 재사용할 수 있는 프로토콜을 사용하고 프로토콜에 따른 코드를 작성함으로써 읽기 쉬운 코드를 작성할 수 있다.</p>\n<ul>\n<li><strong>객체간 1:1</strong></li>\n</ul>\n</li>\n</ul>\n<br/>\n<br/>\n<hr>\n<br/>\n<br/> \n<p>실제 프로젝트를 진행하다 보면 어느 부분에서 이 방식을 써야지 하고 생각하고 느끼게 됩니다.(가끔 이 판단이 틀릴 때도 있지만… 그때는 리팩토링..)</p>\n<p>때에 따라 최적의 방식을 사용하면 될 것 같습니다.\n<br/>\n<br/></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/Delegate-Notification-KVO/Delegate%20vs%20Notification%20vs%20KVO/#delegate-vs-notification-vs-kvo\">Delegate vs Notification vs KVO</a></p>\n<ul>\n<li>\n<p><a href=\"/Delegate-Notification-KVO/Delegate%20vs%20Notification%20vs%20KVO/#delegate\">Delegate</a></p>\n<ul>\n<li><a href=\"/Delegate-Notification-KVO/Delegate%20vs%20Notification%20vs%20KVO/#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"/Delegate-Notification-KVO/Delegate%20vs%20Notification%20vs%20KVO/#%EB%8B%A8%EC%A0%90\">단점</a></li>\n<li><a href=\"/Delegate-Notification-KVO/Delegate%20vs%20Notification%20vs%20KVO/#notification\">Notification</a></li>\n<li><a href=\"/Delegate-Notification-KVO/Delegate%20vs%20Notification%20vs%20KVO/#%EC%9E%A5%EC%A0%90-1\">장점</a></li>\n<li><a href=\"/Delegate-Notification-KVO/Delegate%20vs%20Notification%20vs%20KVO/#%EB%8B%A8%EC%A0%90-1\">단점</a></li>\n<li><a href=\"/Delegate-Notification-KVO/Delegate%20vs%20Notification%20vs%20KVO/#kvo\">KVO</a></li>\n</ul>\n</li>\n<li><a href=\"/Delegate-Notification-KVO/Delegate%20vs%20Notification%20vs%20KVO/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Swift 에서 객체간 통신 방법들","date":"2020年05月07日","description":"Delegate vs Notification vs KVO"}}},"pageContext":{"slug":"/Delegate-Notification-KVO/Delegate vs Notification vs KVO/","previous":{"fields":{"slug":"/2020/2020/"},"frontmatter":{"title":"2020 목표 🏞"}},"next":{"fields":{"slug":"/Instance Method VS Type Method/Instance Method VS Type Method/"},"frontmatter":{"title":"Swift의 Instance Method VS Type Method"}}}},"staticQueryHashes":["426816048","63159454"]}